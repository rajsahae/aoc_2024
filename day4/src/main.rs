fn main() {
    println!("XMAS: {}", count_xmas(PUZZLE_INPUT));
    println!("X-MAS: {}", count_mas(PUZZLE_INPUT));
}

fn check_valid(input: &[&str]) {
    let row_len = input.first().unwrap().len();
    assert!(input.iter().all(|row| row.len() == row_len));
}

fn input_size(input: &[&str]) -> (usize, usize) {
    let num_rows = input.len();
    let num_cols = input.first().unwrap().len();

    (num_rows, num_cols)
}

fn letter_at(input: &'static [&'static str], location: Location) -> &'static str {
    let row = location.0 as usize;
    let col = location.1 as usize;
    &input[row][col..=col]
}

fn xmas_letters_at(
    input: &'static [&'static str],
    rotation: Rotation,
) -> (&'static str, &'static str, &'static str, &'static str) {
    (
        letter_at(input, rotation[0]),
        letter_at(input, rotation[1]),
        letter_at(input, rotation[2]),
        letter_at(input, rotation[3]),
    )
}

type Location = (i32, i32);
type Rotation = [Location; 4];

fn is_valid(input_size: (usize, usize), rotation: &Rotation) -> bool {
    for loc in rotation {
        if loc.0 < 0
            || loc.0 as usize >= input_size.0
            || loc.1 < 0
            || loc.1 as usize >= input_size.1
        {
            return false;
        }
    }

    true
}

fn scan_for(input: &'static [&'static str], letter: &str) -> Vec<Location> {
    // For sanity check, we'll ensure all the rows are the same length
    check_valid(input);
    let (num_rows, num_cols) = input_size(input);

    let mut loc: Vec<Location> = Vec::new();

    for row in 0..num_rows {
        for col in 0..num_cols {
            if letter_at(input, (row as i32, col as i32)) == letter {
                loc.push((row as i32, col as i32));
            }
        }
    }

    loc
}

fn count_xmas(input: &'static [&'static str]) -> usize {
    // Thinking about a brute force approach.
    // We scan for an X, and at that index, we calculate the max 8
    // possible sets of index pairs that would make XMAS.
    // Filter out anything out of bounds, and then compare each
    // one to XMAS, count any that match.

    let locs = scan_for(input, "X");

    locs.iter()
        .flat_map(|loc| create_xmas_rotations(loc))
        .flat_map(|rotation| get_xmas(input, rotation))
        .filter(|letters| *letters == ("X", "M", "A", "S"))
        .count()
}

fn count_mas(input: &'static [&'static str]) -> usize {
    let locs = scan_for(input, "A");

    locs.iter()
        .map(|loc| create_x_mas(loc))
        .flat_map(|rotation| get_xmas(input, rotation))
        .filter(|letters| {
            *letters == ("M", "S", "M", "S")
                || *letters == ("M", "S", "S", "M")
                || *letters == ("S", "M", "M", "S")
                || *letters == ("S", "M", "S", "M")
        })
        .count()
}

//   0  1  2  3  4  5  6  7
// 0 .  .  .  .  .  .  .  .
// 1 .  .  .  .  .  .  .  .
// 2 .  .  .  .  .  .  .  .
// 3 .  .  .  S  .  .  .  .
// 4 .  .  .  .  .  .  .  .
// 5 .  .  .  .  .  .  .  .
// 6 .  .  .  .  .  .  .  .
// 7 .  .  .  .  .  .  .  .

// rotation of (3, 3) in Row/Col format should be
// - (3, 3), (2, 3), (1, 3), (0, 3)
// - (3, 3), (2, 4), (1, 5), (0, 6)
// - (3, 3), (3, 4), (3, 5), (3, 6)
// - (3, 3), (4, 4), (5, 5), (6, 6)
// - (3, 3), (4, 3), (5, 3), (6, 3)
// - (3, 3), (4, 2), (5, 1), (6, 0)
// - (3, 3), (3, 2), (3, 1), (3, 0)
// - (3, 3), (2, 2), (1, 1), (0, 0)

// And more generally, given starting point (x, y) where x is the row and y is the col
// - (x, y), (x-1, y), (x-2, y), (x-3, y)
// - (x, y), (x-1, y+1), (x-2, y+2), (x-3, y+3)
// - (x, y), (x, y+1), (x, y+2), (x, y+3)
// - (x, y), (x+1, y+1), (x+2, y+2), (x+3, y+3)
// - (x, y), (x+1, y), (x+2, y), (x+3, y)
// - (x, y), (x+1, y-1), (x+2, y-2), (x+3, y-3)
// - (x, y), (x, y-1), (x, y-2), (x, y-3)
// - (x, y), (x-1, y-1), (x-2, y-2), (x-3, y-3)
fn create_xmas_rotations(loc: &Location) -> [Rotation; 8] {
    // println!("creating rotation at {loc:?}");

    let x = loc.0;
    let y = loc.1;

    [
        [(x, y), (x - 1, y), (x - 2, y), (x - 3, y)],
        [(x, y), (x - 1, y + 1), (x - 2, y + 2), (x - 3, y + 3)],
        [(x, y), (x, y + 1), (x, y + 2), (x, y + 3)],
        [(x, y), (x + 1, y + 1), (x + 2, y + 2), (x + 3, y + 3)],
        [(x, y), (x + 1, y), (x + 2, y), (x + 3, y)],
        [(x, y), (x + 1, y - 1), (x + 2, y - 2), (x + 3, y - 3)],
        [(x, y), (x, y - 1), (x, y - 2), (x, y - 3)],
        [(x, y), (x - 1, y - 1), (x - 2, y - 2), (x - 3, y - 3)],
    ]
}

fn create_x_mas(loc: &Location) -> Rotation {
    let x = loc.0;
    let y = loc.1;

    [
        (x - 1, y - 1),
        (x + 1, y + 1),
        (x + 1, y - 1),
        (x - 1, y + 1),
    ]
}

fn get_xmas(
    input: &'static [&'static str],
    rotation: Rotation,
) -> Option<(&'static str, &'static str, &'static str, &'static str)> {
    // println!("getting letters for {rotation:?}");
    let is = input_size(input);
    if is_valid(is, &rotation) {
        Some(xmas_letters_at(input, rotation))
    } else {
        None
    }
}

const PUZZLE_INPUT: &[&str] = &[
"MSSMMSXSMSMSXMXXXMSMSSMSAMXAXASXSASMSMXMXMMAMSMMMSMSXSAMXSSXMASMMMXXMASXMSXMSSXXXAMMXMXSMSAMAAASAMXMMSSSXXSMMXXXSMXSXMXMMXXMASMMMMSXXMAXXMAS",
"XAAAAAXMASMSASXMAMAAMXAAMSSXSAMASASAAAXSAMXAMAAASAASAMMSMMMAXAXAMSMMAAAAAXASXAASXSSMAMAMXMASXMMAASASXMAMAMMAMSMMMMAAAMMSMXSAMXSAMASMSMSSMSSM",
"MMSMMMSMAMAMAMSAMXMSMMXMAAXAMAMAMMMXMSMSAMSASMSMSMMMAMAAMAMSMMSXMAAMMSSMMSXMMMMAAAXMAMAMMSXMAXXXXSASXMASAASAMXMAAMSSXMXAAAMASAMXMXSAAAAXAXXS",
"AXXXSAMMAMAMMMSXMASAMXMXMMMXXAMXSXAXXAAMAMSMMAAXSXXXXMSSSSSXAASMSMSMAAXAASAMXSSMMMXMXXASAMAMAMSSMMXMASAXMXXXSASMSXAAMSSMSMSAMASXSMSXMSMMSMMM",
"SSMAMASXMSASXASASMSAXXAXXSXXSAXAXMSXMMSMAASASXMMSAMXAXMMAMXMMASAAAAMMSSMMSAXAXMXXAMSSSXMXXAMAMXAAXMSAMMSMMSMMXSAXMMSMAAAAXMASAMMMASAMXXSMAAM",
"XAMMMAMXAXAXMASAMMSXMMMSAMXMAMSMSXMASAXMSXSMMASXMAMSAMXMSMXAMSMMMSMSMAXMASAMSSMMMMSAAXMAMSASXSSSMMAMXSAAASAMSAMXMAMAMAMXMMSXMASAMSMMMMMXMMMM",
"SSMMMASMXMMMXAMXMXMASAAMMXXSAMAAMASAMAMXXAMASAMMMSMAAAXSAMXAMAAAMXMAMXMMASMAXAMXAXMMMMMAMMAMXMAAXMMSAMMMSMAXSASXAMSASXSSMXXXSAMASAMASASMSMSA",
"AXAAMMXMXMAAMMSMMASMMMXSXXMAXSMAMAMAMASMMMMAMXSAXAMAMSMSMMXXXMSMSXSXSMSSMMMMSAMMSMSAMAMMXSSMMMSMMMAMASAXXMSMSAMMAMMMMMMAMSMMMMSMMASASMSAAAAS",
"ASXMSMASMSMSMSAAXAMAXSAMXMAMASXSMSSXMAAXAAMASXSMSXSXMAMMXMMSMXMMXMMASAAAMASASAMXAAMXSAXSAMXAXMASAMASXMXXSAMXMAMMXXSMSAMMMAAAXMAXSXMASXMMMXMA",
"MXMAMMMSAXMAXSSSMSSSMXMAXSMXMMAXAXAMMSSSSMSMSXMAXMXAMXXMASAAMAMAAAMAMMSMMAMXSAMMMSMASAMMMMMMMSASMSASAMXXMAMASMXMMXSASMMXMMMMMSSMXAAASAMXSSMM",
"ASMMSSMMMMMSXMAMAXAMMMMSMMASXMAMXMXXXAAMAMMAXAMSMASMSSXSAMSMXAMMSSMSSXXAMXXASMMMAAMXMMMMMXMAMMMMAMXXAMAXMAMMMMAAMSMAMSMSMSMSMAXMASMASAMXMAMX",
"MXSAAMXSMAAMAMXMXMAMXAAAASAMAMAMMAMXMMSMMAXXAMXAXXMAAAAMXMAXMSSXAAAMAAMSSSMASXAMSSSMAASAMXSASAMXMXAXSMSMSASXMSSSXMMSMMMAAAAAMXMXAXMMMMMMSMMM",
"XAMMSMASMMSSMMMMXMMMSMSSXMMSXSXMXXAXSAMXXMSAMXMMSSMMMMMSXMASAAAMSMMMMSXAAAMXMXSXMXAMSMSASAMMSMSXXMSXMAXAMASAMXAMASAAMASMMMSMSMSAXAXSMSSMMXXS",
"MSMMXMXSAMAMXAAMAMMAMMMMAMASASAMSSSMMMSAMXMMXAAXAASAMAXMXAAMMSSMXMASXMMMSMMAMAMXSMMMMXSMMMSMXMMMXAMAMMMSMMMAXMAXAMMXSASXXXXMAAAMMSAMXAAAXSAM",
"XMASXMASAMMXSSXSASMASAMXAMMMAMAMAAXAMASAMXAMXXMMSMMMASAMXSXSXXAMXSMMMMAXMASXSSMMSAXAXASMSXAXXAAAMSMAMAAXAXMSMMSMMXAMMASMMSAMMSMXAMAAMSSMMMAX",
"MSAMAMASAMXMMAMXMAMASASXXSAMXXXMMSMSMXXAMSSMSSMXMAASMXAMXXAMXSAMAMXAASXMSAMMAAXASXMASMSASXSSXSAMSAXSSSMSAMSMSAAMAMSXMAMMAXXMXAXMAMMXAMXMXSMM",
"XMAXXMASAMMAMAMAXAAMMAMAASXSMSSMAMMXMASMMXXAASMAMXMMAMMMMMXMAXAMMMSSMMAMMMMMSMMMSAMAMXMAMAMAMXAXXAMXAMAXMXAAMSSMAXAAMMSMSSMXXMSSSMMASXMXAMAS",
"SSSMSMASAMSASMSMMMSXMXMMXMXAMAAMSMSAMXXMASMMMSMASAMMXMAMAXXSMSMMAAMMMSAMXMAMAMSXSXMMMAMAMXMXMMMMSMSMAMMMMSMSXXMXXSSXMAAAMXMASXAAAAMAMAXMXSAM",
"MAAAAMXSMMAASXAXMAAMSMSMSMAMMMSMMAXXXSAMXMMAAXXASASAXSASXMMMAAMMMMSAASAMXSXSAXSASXSAXAMASASASXAAAMAXSMXXMXXMMSMMMMXAMSSSXAMASMMSMMMSMXMMAMAS",
"MSMMMXAMMSMMMMMSMAMMAAAXXXSMSAAAMMMSMSXXSXSMSSMXSAMAMMASAAAMMMSXAMMMMSAMAMMSXMMAMASMSXSMSASXMXMSSSMAXAMXXMAMAXSAAMSMMAMXMXMASAMAMAAXSMAMXSAM",
"XXAXXMASAXAAAASAMMSSMSMSMXMAXSMMMSASAMXASAMAMXMXMXMXMMXMMSSSSMXMXSAAXSXMMSAMMMMAMXMAAASXMAMAAXXXAXXXSAMMXMXSSMSXXMAAMXSASXMASAMMSMXXAMXMASAS",
"MSMSMMMMASXMSMSASAMXAAAXAMMMMXMMAMASAXMASMMAMAMMMXAMXXMMXMAAXMASMSXSMSAMAMMXAAMXXAMMMMXAMXMXMXMSMMSMAAMXXXMAAAXASMMXMMMXXAMAXAMXSAMSSMSSMSAA",
"MAMAAAXXMXMAXAMMMXSMSMSMMMASMSAMXXMMMXMASXSXMASASASASXAMAMMMMSXXAMAMASAMASMSSSSMXXSMSSSSMSMAMAMAXMAAXMMSMMAMMMMXSAMSSMMSSSMSSMMAMAMAMMXAAMXM",
"SASMSMSMMAMASASMSMMAMXMXMMAMASXMMSSMSAMXSAMASASMSAXAMAXSASXSMMSMSMAMXMAMASXAAAAASMMMAAXXAMMAMAXASMMSMXXXXAXXMXSAMXMAAAXAAXAMAAMXSAMMSMSMMMAM",
"SAXXAAAXMXMASAMXAAMAMASAMMSMMMAMAAAMAXAMMAMAMMSXMXMAMSMSAMMXAASMAXAXSSSMXSMMSMMMXAAMMSMMMMSMMMMMXAMMASXMSXSAMXMASMMSSMMMSMSSXMAMAMSXAAXAAMAS",
"MMMSMSMSXAXXMAMMXMMASMMASAAAASAMMSSMMMSXSMMMSAMXMMSMMMAMAMMXMMSSMSXSMAAAXMAXMXMXSXMMAAAAMMAMXMASXSMMMAAAAAXAMXSMMMMAAAXXAXXAMSASASMXMSMSMSMS",
"XSAMAMAAXMMXMSMXAXSAXAMAMMXMMXASAMAAXAXAMMAXMAMAXAAAAMAMXSAASAXAXAMSMSMMMSSMMASXSAAMMSMMXSASASMSAXAMSSMMMSXMMXXSAMMSSMMMSSSMAXAMXMXAXMXXXAXX",
"MMASAMAMXSAMXAASMMMMSSMSXMMSSXMMMMMMMMSAASXSSSXMSSMSMSXSAMMSMASXMXMSAAAMAMMMSAMAMSMMAXAMXSASMSAMAMAMAAAAAXASMMMMXSAAAAXAMXAXSMMMSXSMMXASMSSM",
"MSMMASXXMSSSMMMMAAXAAAXMAMAMAASMSSXMSXSMMXAAAMXMAMXXAMXMXSSXMXMAMMASXMXMXSAAMAMXMMXMASAMMMMMMMXMXMAMSSMMAMAMMAAAXMMMSMMSSXMAXASXAASXMMXAMAMA",
"MAMXAMXSAMAXXXMSSMMMSMMSMMAMSMMAXMASXAXASMMMMMSMASAMAMASXMMASMSSMMASMMSMMMMSSXMSXSAMXSMMAXXAAMMAAMAMXMMMMMSMMSMSSSMXAMXMAMXASXSAMXMAXXXXMAMM",
"SASXMMMMAMMMSMXMASXMAMMAMSSXMAMMMSXMMXMMAAMXXAMSMMMSSMMXMAMXMAAXXMAMAXAAAXMAXAAMXMASXMASXMSSSMASMSMSAMXASAXAMXAMMAMXSAMXXMMXXAXXXAXXMASXMMSX",
"SAMXXAASAMAAAAMSXMXMAXXAMAXAMAMAAMASASMXSMMMMMXAXMMAMASMSAMXMMMMSMSMSMSXMSMASMMMASAMXSAMXXAAAMMMAAXMMMSASXMASMAMMXMAMAMAAXXASMXSSSMXSXMAASMM",
"MAMASMMSMSMSXSAMXMXMXSSMMSSMSSSMSSXMASMXASXXAXSXSXMXSAMXSASASXAXAAMMXXMASAMXMXAMXSASXMASMMXSXMASXMXAAXMMMMSMMXSMMXMAXAMSSXMMMXAMAMMXMAMSMMAM",
"XMMMAMAXMAMMAAAXAASXXMASAAAXMMAMXMXMXMMMMAXMMMSMMXXXMAMASXSASMMXMMMXSAMXSAMASMXSASMMAASMMAXMAXXSASXSMXSAAMMMSMMAMMSSSMXAMAXXAMMMAMXAXMMAMMSM",
"XXAMAMXMXSAMXMMSXXAMMSAMMSMSXSAMAMMSAMXSXMSMSASAXAAMSSMMXAMXMASASASMSMMAMMMASXXAMXMSXMASXSAMXSAMAMMAXAMMMSAASASAMXAASMMASXMMAMAMSSSSSSMMSAMX",
"ASXSMSMMMXAXXAMAXSMAAMXSXMMSASXSMSASASASAXMAMASMMMAAAAAMSMMXMMSASASAMMMSMMMMMXAMXSMXMASMXXSXSAMMMXSMMSXSAMMXSASXSMMSMMMMAMXAMMMMMAAXAAXAMASA",
"MMAMXAAMASMXSAMAXAXSMMAMXAAMAMAAAMMSAMXSASMXMAMAMXAXXSMMAMMMSAXAMAMMSXAMXSASMMXMASAAAMXMASMXSMXAXMMXAXXSAMXAMAMXXXXAXASXMAMMXASAMMMMXMMXSAMM",
"XXSSSSSMAAAASAMSAMXAXMASMMMSSMMMAMMXAMXMASAMXXSSMSMSMAMMXSAAMXSXMXMAMMMMAMASMXSXMXSMMMAXMAMAMXSMMAMAMAMXMXMMMXMXMASXMMMXXSSMSAXAMSAAAXXXMXSX",
"XXXAAAXMSMMMSXMXMAXXMSAXMAAAAXAMASXSXMXMXMMAXXMAXSAAMXMAASMSXMAXXSMMSASMAXSMMASAMAMMXSMXXAMASMSAXSASMSMMMAAAAAMASAXSAMXSXMAXXASMMXMSSSXXMASA",
"MSMMMMXMAXMAXAXMMSSSMMSMSAMSMMASAXXSAMXXAAXSMSAMXMSMSXMMXSXMASMMMSAMSAMMMMMAMMSAMSXSXMAMXASXXAMXMMAMAMAASMSMSXSAMAMAXSAMAMMMMMAMXMXXAMXAMAMM",
"AXAXXXXMMSMMXSMXAAMAAAAXXMXMASXMMSMXAMAXSSMAXMASMMMXSXMMXMASAMXAAMAMMSMASAMAMXSAMAAXMSAMMMMMMSMMMMAMMSSMSXXMAAMMMSMMXMASAMAXSAXAMAXMAMMMMASA",
"SMXMMMMAAMAAAXAMMSSSMMSSXMAMMMAXAAAXSMSMMAMAXMASMASAMAXAASAMASMMXSXMAXMXMAXAMXSXMMSMAMXSASASMXAXXSXMXMMASMSMMSMMAMAMMSAMXSSSMXMXASMMAMMSAXAA",
"XAAMXAXMMSMMMSASXAAMXMMMMXAXASMMSMSMMAMXSAMXMMMSMAMASAMMMMXSXMXSASAMAMXAXXMSSMMASAMMAMXSAMASASXMASMSSSMMMMSASMXSASAMASMSXAMXMASXSMMSXSAMXSSM",
"MSSSSXMAXMXAASAMMSSMMSAASXMMASMAAAAMMSMXMASMXAXMMAMXMMSAAXXAXMXMASASAMXSSXXMAAMXMAXSASXMSMAMMMXSMSAXMAMXAAMXMAASXSASXXAXXXAAXSAMXAAMMMASAAXS",
"XXAXAXSXMXMXXMAMAMAAXMMMSASMAMMSMMSXAXXAXAMASMSXSSSMXAXMSMMAMXAMAMXMASAAAMMSSMMAMMMMASMAXMAMAAASAMXSAMMSMSMAMMMXASAMXMMMMMSMSMSASMMSMSAMXMSA",
"XSMMMMSMAXAMXSMMSSSMMXSXMAMMMMAXXAXMMSSMMSXXAMMMXXAAMSSMAMMAMXMSAXXSAMMSMSAMXASASXSMAMMSMSSSMMSMAMAMXAMXAAXXMMSMMMAMMXAAAAAMAAXMMAMAAMSMSXAM",
"MXXAMASXMMXSAMAAAMAASAXAMAMASMSSMSXAAAAXAXMMAASMSMMMMAAXASMMMAMAMAXMASXMXMMSMMMASAAXSXXAAAAAXXXXAMXAMXMMSMMXSAXAXMASMSMSMSSSMSMMSAMMSMAXMMMX",
"AMXXSASAMAXMASMMSSMSMASMSASASAMXAAMMMSMMASASXMAXMASAMMSMXSMMSMSASMMSAMXSSSMSASXXMXAMXAAMXMSMMMMSXMMMSMAXMAMXMXSAMSASAAXXMAXAMXAXMAMAMMMSMAXS",
"SAMXMXSAMASXMMASXMXAMXMAAASMMMMMMMXSXMASMSAMMSMXXAMMSXAXAXAXAMMAMXXMASXXXAASAMMXSXMXXSMSXMXMXAAMASAAAXMMSMMMXAMAXMSMXMSMASXMMAXSSSMAMAAAASAS",
"XXXXSMSXMASAMXXMAMSMSAMXMMMMAAXAXXASASAMMXMAMMXSMXSAMXSMMSMMMASAMXSSMMMMMMMMAMSXMASMXMAXAMASMSMSAMMSMSXAXXAMMMSAMXAXASXXAXAMMSAMAXASMMSSSMAS",
"XXSAMXSXMASAMAAMAMSASMSMSMASMSSSXMMMAMMMMMMXMXAMXAMAMSMAAAXAMASASAAXAAAAXXXSAMMAMAMXAXXSMMASAMAMXSXMXMMSMXXMAXXAMXSMMSAMXMAMAMAMXMAMAMXXXMAM",
"XAMXXMSASASAMXXMAXMAMASAASXMXMXAASXMXMAAMAAAMMSSSXSAMXASMMSSMXSAMXSSSSSSSMASMSMXMMXSSSMMXMASMMMMXMASAXAAAMSSMSMSMAXXSXMASXXMXSAMAAXSSMAXMMAS",
"MXMMAAMAMAMAXSASXSMMMAMSMSMMAMMSMMAMSMSSSMSXSAXAAMXAAAXMAMAXMAMXSAMXMAMAAMAMMAMMMSAAMAAAAMXSXSAMAMAXXMMMXMAAXAAXMAMSMAMXMASAASMSSSXMAMXMMASM",
"SAXMASMMMMSAMSAMXAAXMMMMMMASMXAXMSAMSAMAAMAMMXMXMAXXMXSSXMAXMAXMSAMXMAMSMMSMMAXAAMMMMSMMSSMMASMSSSSXSAMSSMSXMMSMMXSXSAMMMAMMMMXAMXXAAXMSSMMX",
"SMASAMXXAXMAMMXMSSMMSSMAAMMMSMAXMMMMXAMSMMAXXMAMXSAXXXAMMMSMSMSASAMXSAMAXAXMSMMMMSXXMXXXAAAMAMXAMAMAMXMXAAAMSMMXMXMAMXMXMASMMMMMMMMSSSMAAASX",
"MAMSAXSMMMXXMAMXAMXAXASMMMSAMMMMSSMXSXMXXSMMSASXAMMMSAMXAAAXAAXMSSMMSSSMMMXAAAASXSMSMMAAASMMMXMMMAMSMSMSMMMAXAXASXMSMSMSAASXAAAAAAAAAXMAMMAS",
"XAMXAMXMMXSAMMMMMSMMXMMSAMMAMSXMAAMAMAMXMSAXASMMMSAAASXSMSXMMXMXMASAMAMXASXSMSMSAXXAAMASXMMXMAXMMSMMAMXMXXXSSXSMMXAAAAAAMMMXMSSXMMMXMAMSSSXS",
"SMSXSMSXAAXXMAAMXMASASAMXMMAMMAMXXMXSAMAMMAMMAXAASMMXXXMAAXAXAXASMMMSAMMMXAMAMAMAMSSSMMMMSSMSXSAAMAMXMSMMSMAAASXMMAMSMSMXMASXAXASMSSXSXAAMAM",
"SAAAAAXMMXSSSSSSMSAMXMASAMMSMSAMSMSMMAXAMXAAXMXMMXAMSMXMXMASXXSASXAXMASASMAMAMSMSMAAMXAAAXAAAAXMMMAMXMAAAXMMMMMAMAXXMXAXXMASMSMMMAASAAXMXMAM",
"SMMSMSMXSXAMAMAMAXASXMAMASAAXSMSAAAASXSSSSMSSMSXMMSMAMSXMMMAAXMAMXMSMXXASAAMASXAMMMMSMSMSSMMMSMSMMMMXSSSMSAXMASAMSAMXSASMMMXAMAXMMMMMMMSASAS",
"SAXMAXMAMMMMAMXMXMXAAMXSAMMSMXSXMSMXMMAAAMAAAASMMAMSMXMAAXXMMMMAMAMAMAMSMXASXSMAMAAAAXMAMAXMXMXMAASMMMAAAXMMMASMSMMMXXMAMAASMSSMSAAAAAASASMS",
"XMMMAMMASAXSMSMSSSMSAMAMAXSAMXMMXAXXXMMMMMMMSMMAMAMAXAMSMMMMAASASASAMMXXASXSASMXSMMMSXSXSMMMAXXMSMXAMXSMMMXAMMMMAAASMSMASMMXAAMASXSSSMMSAXAM",
"MSXMASMXSXXSAAAMAMXAAMXSAMAAMMAASMSMAMXMSMXMMASMMSSSMSMXASMSSXSASMSMXMAMXMAMAXMMSXMXMXSAMXAMXSAMXXSSMAMXXAMMSSXMMSMMAASASXSMAMMXMAMAAMAMAMSM",
"XSAMASAXMASMSMSMAMXMMMAXMASMMMMAMAAAAMXXMMAAMAMAAAAAAMAXAMAAMAMXSMMASMASAMXMXMSASMXAMAMAMSMSAXXMAXAAMXMXSMMSAMMSMXXMSMMMSASASMXMMXMSMMXXAAAX",
"MMSMAXMAXSXMASAMASMSSMMMSAMXXMMSMSMSMSXAASMMSASMMSSMSMAMSMMMSXMAXAMAMMXSASASAAMASAMXSASAMAXMXMSSMSSSMASMAASMAMAAMXMMMASAMXSAMXXAMXAXXSSSSSMS",
"SXMMSSXSMASMXSXSMSASXAMAMAMMSXAXAMXMAXXMMSAXMAMMAMXAXMAMAASAMASMSSMMSSXMMSASMSMSMXAMSXXMXSSMSXMAXMAXMASMMXMSAMSAXXMAMAMASXSAMXASXMXMAMAAAAXA",
"AAXAMXAXAXMSAMXSAMXMAMMASXMAMMMMMSAMXMASAMMMMAMMMSSSMSXSSSMASAMMAMAAXXASXMXMAMMXMSSXMMSSXAAAMXSSMMMMMMSXMAMXMAMAMSXMMASAMMSAMSMMXASMSMMMMMSS",
"MSMMMMMMMMSXSXAMMMSMSMSXSMMSSSMAMXAMMMXMAMXASAMXSAXAAXMXMAMAMXXMASMMXSMMAAXMXMASMAMAASAMMMMMXAMAAMXAXMXAMSXSSSMAMMAMSMMASAMAMAAXXMSAAMAXAAXX",
"XMAMAMMAXSXAAMMSMAAAAASASAXAAXMASXSMAAAXXMSXSMSMMXSMMMAXMAMXSXMXMSXSXAAMAMMMAMSMMASXMMASMSSSMASAMMSMXMSMMAMXAASMMMAMAASAMXSSSSSMMXMXMAMMMMMM",
"XMXMAMXMSMMMMMXAMMMMMSMAMSMMSMMXSAMXXSASXMMASXAAAMXMSSSMXSSMMXSAXMAMXSSMMXAXXMAASAXAXMAMAAAAMAMASXXAAXAMXMAMMMAXASASMXMMSAXAXMAXSAMMXSSXSASM",
"MSMXMSMMAASMASMSMSSMMMMXMAMSAXMAMMMXXAAXAAMMMXXSMXMAMAAXAXAAAAMAMMAMAAMAMSSMMSMMMMSMSMSSMSMMMMSXMXMSMXASMXSAXXMSXMASMMMSMMSSSSSMMXSAAMAXSASX",
"MASAAAXSMSMMASMAMAASASMMSSXSAMMAMXMXMASXSMMMMSMMMAXXMXMMMSSMMMSAXSAMMMSAMAXAAAMSMXAAAAMSAMXXXXAMXAXAMMSMMXMASXXSAMXMAXXAAMSAAAAXXAMMSSMAMAMA",
"SASMSMMXXXAMAXMAMXSMMMAMAMMMAMSASAXSMMMAMASAAAAAMMSMMSXSXAMAXXAMXSASXASXSAMMMMSAAMMMMSMMMMSMSMSSSMSASMMAASMMMMAXMMMXMMSSXMMMMMMMMXMAXAXSMSMS",
"MASXXXSSXSAMSSSXSXMMXSXMASXMSMSASXMSAMMXMASMSSSMSAMXAMMMMMSAMAMSXMASMXMAXMXSAXSMSXSAMXAXMASMXAAAMXMXMASXMXSAAMSMSAMAAAAAASXSMXAAXMASXMMXAXAX",
"SXSASAAXASAMXAAASXMAMAMXXAXAMAMMMAMXAMSAMASAAMMMMMMMMMAMSMMASMXSAMAMMAMXMAXMAMXXMASAMSSMMASXMMMMSAMAMMMXMASXMSAASASXSMMSMSASAXSXSXMMAMMMMMMM",
"MAMAMSMMMMASMAMMMAMMSAMSSSMXMAMSSXMSSMMXSAMXMAAAASXSMSMSAAXXAXAMAMMMSASAAXMMMAMAMAMAMAAAMASAAXXASASASXSAMMSXMMMXMAMAAAAXXMAMMMMAMXMSAMAAAAXX",
"MXMAMAXAASMMAXMASXMXMAMAAMAXXAMXXAMAXAXMMMSAXSXSMMAAAAMSXSMSAMXSSMMMSASXSMSXMAAAMASXMXSXMXSMSSMMMXXASXXAXASAXMSSMSMSSMMSAMXMXAMAMMAMASMSXXSA",
"AAMAXASMXXAXSXSASAMSSXMMMMMMSMSMSSMMSSSXAMXMAXAXXMSMMMMXAXAMMMMMAASAMXMMAMAASMMSXMXMSXMASXXMAXAMMSMMMMSSMASAMXSAAXAXAMXXMXSSMXSAAXMSMMAMMSMX",
"SSSSXMMMXSMMMAMMSAMMSXAAMAAMAAAXXAAAAXAMAMAXAMMMMXMAMXMMMMSAMXAMMMMAMAMXAMXXXMAMXMMXSAMXSAMMSMSMASAMXAAAMAMXXMXMMMXMMSMMXAMAMXMMXAMAMXAMMMAM",
"AAAAXSSMMAXAXXXXXXMAXMSMSSMSMSMSXXMMSMMAASXSASAAAAXAMAXAAMAXMSSSXXSSMSSSMSSSMMAMASAMXAMAXMMAXAMMXSSMMMMMMASXMMMSAMXXXXASMMMSAXXAASXMSSMSAMXM",
"MMMMMXAAXXXASAMXSSSSMMXMXMAXXAMXXASXXXXSASXXASMMMSSSSSSSSSXMASAAXMAXAXAAAAAAAMMMAMXXXSMSMXMASASXMXASXMMXSASMAAAXASXMASMMSAAMSAMMXMAXXMASASMS",
"XAXXXSSMMMXXMAAASAAAAAXSAMXMSMMXAMXAXMXMASXMAMASAMXXXAAMAXMXXMMMMAAMMMSMMMSSMMXMSSMMSMAXXAMASXMMMSAMXSAXMASAMMMSAMXMASAAXMXSMXXMASXMMSXXASAX",
"XAXSAXXMXXAASXMMMMMSMMMMASXMXXMXSAMXMSMMSMMAAXXMSSMMMMMMAMMMXXXSSMSMMAXAXXXMMSMMAAASAMAMSSMXXMXAMMAMAMAXMAMMSAMXASAMXXMMMXSXMSASXMSAMXMMMMMX",
"AXAMAMXMAXXXMMXAAAXAAMASAMAMMASAMAMXXMAXAAMSXSAAXXAXMAXMMSAAXSMAMXXAMSSMMMSMAXAMMSMMAMMMAAMXMAMSSSXMXSXSMAXXMAXSSXMMSXAMSXMAXSASAMXMXAXAXAXM",
"SMXSAAAMASMASASMSSSMXMAMAMSMSAMXSAMXMMSSSMMAAXMXMXMMSXSAASMSMSMAXXSAMAAAAAXMASMMMMMSSMMMMXSAMSAMAAXSXMXAMAMSMMMXXASASMSMAMSMMMAMMMXMSMSMSXSA",
"XAXMAXXXAXXAMXMAAMAASMSXXSAMMXSAMMSXAAAMAMMXSSSXSSMAAMMMMSXAAXSSMMXAMSSSMMSMMXMAMMAAAAASXMSASASMMMAMAMXMMSMSAASASXMASAAAMMAAAMAXAXAXAXAXMAMX",
"SSSSMSMMMSMMMAMMMMMXMAMAXSAMAXMASMSMMMXMAMXAMAXXMAMMMSAMXMMSSXXMASXSMXAMXASASMSMMMMMXSMSAMXMMMXXAMAXAMXXMXAMSMMASMMMMXMMXMAMXSASMXSSMSSSMAMX",
"XAAXAAAAMAASXSMMAAXAMAMSMSMMMSMMSAMASASXXXMXSAAMSSMSASASAXXMMAXMXMAMXMXMMAMAMXAASXSMAMASAMAXAXMASXSSSSMAMMMMMXMXMXAXMASXMMSSMMMSAAMAMXMAMXMM",
"MXMMSMSMSXSAAMSSSMSSXMXAAXXAXAXMMASMMASAMSXMMASXAXXMXSAMAXXASMSMXMXXXSXSMSMXMSMSAMAMAXASASXSMSAXMAXAAMMASAXAXAMMMSMSMXAAAAAAAAXMMMMAMXXSMSXA",
"AAMAXXAXSXMMMMAXAAAMAASMSMSMSMSXSAMXMXMASMXMXAMMMSMMAMXXMMMMAAAMMSSMMMAAAAMXXXMAMAMMSSMMAMXAASMSMMMMSXSASASMSMMAMAXAAMMMMMSMMMAMSSSSMMXAAMSS",
"MAMASMSSMAXXXMXSMMMMMMSXMAXMAMMMMMSAMAMMAMMMMMXXMSMASXMXAMXSMSMMAMAAAMSMMMSMMXSAMSXAAMAMMMXSASMMAXXXAAMAMASAAMSMSMSMSXXASMMMSXSXAAAXAXSMSMAM",
"SMSMSAMAMAMMSSMMAXSAMXXAXSMSAMXMAMMMXAMXSXAAAAASMXMAMAMSXMASXMMMSSSMMXXAXXAAMAMASMMMMMAMAMAMAMAXXMXMMXMMMSMMMMAASXSXXXMASAMASAXSMSMMMMMAXMXM",
"AAAAMXSAMASASAMAAASASXSMMMXMMMMMMSXSSXSAASXSMXAMAAMXSAMAAMASXXMXMAAXXXXSMSSSMASMMXAAMSSSXMXSSSSMXMAAMASAMXAXXMMMMAXAMMAAMAMAMXMAXAXAAASMSMSS",
"MSMSMASASAAXSAMXMXSASASXSMSMSAAMAMXXAAMMMXMAMMAMSMSXSXMXSMASAMXMMSMMMAMXAXMAXASXSSMMXAMMAMXXAAMAXSAMSASASXMMXXXSAMMMAAXMSMMXSMMSSMSSSXSAAAAX",
"XMAXMASMMASMSXMXMXMAMXMASAAASMSMASMMMMMSSSMAMMAMAXXMMASAXMMMMXSAAAXAXSAMMMSAMXMAMXMMMMSXMMAMMMMSMMAMMASXMAMXAAXAXMAXXMMXAXXMXAAAAXAAXAMMMMMS",
"XMXMMMSXMAMAMXMMSAMAMXMXMMMXMAMXMXAAAMAAAXMMSSMSXSMMSAMXSMXXAAMSSXSASXMASAXXMXMMMXAXAAXASXXSAMMAAMSXMMMMMAMMMMMMMXXMASXXMSSXSMMSMMMSMSMXXAMX",
"SXMXMAMMSASAMXMASASXSASASASAMXXAMSMMMSMMSMXAAAXMAAMAMASXMASMMMXMXMAXMXXXSASMSSSSMSMSMMSAMAXMASMSXMMMMMMSMMXXAAAXAASMMSAASAMMAMXXMAXAAXAXSXSX",
"XXMAMASASASXXXMXMAMASASASXSXSMSAXAAXMXXXAMMMXMMMXMMXSSMXXMAXMMAXMASMMSMMMAMAAAAAAAXXAAMMMMMSXMAMXAMMSAXMASXSMSMSAXMAXMMMMASXSMASMXMMSMMASAMM",
"MASASXSAMAMASXMSXXMMMXMAMAXAAASMSMSMAAXSASXSXSASAAMXXMASMSMXSSSSMSXMAAMAMAMMMMMMSMSMXMSXSAMXMMAMSSMASXMSAMAAAAXXMASXMSSXMXMAAMXMXXSXMASAMASX",
"MMMAMMXAMSMMMAAXAMXXMXMAMXMSMAMXXXMMMMAXAMXSAAASMSMSSMAMAAASMAMMXXXMSSSSSSMXSAMXAAAMMMSAXXMAXSXMAMMMXAMXAMSMMMXSXMMAMXAXXXSXMASXMXMASXMXSAMX",
"MASXSMSAMXAASMMMSMSASAXXXMAAMMSAMXMXXSMSMSAMXMXMXXMXMXAMSMMMMAMMASAXXAXAAAXASMSAMSMSSMMAMSSSMASAMXMSMSXMAMXMASMMAXMAMMMMMMAAXAMAAMSAMXXXMAMA",
"MMSAAAAXXSSMMAMXXASAXXXSMXSXSAXMAXAAXXXAAMMSAXAMMSSMSSXMXMXSSMSMASXMMMMMMMMMSAAMMMXXAAMXMXAAAMXSXMASMAXMXSXSASASXMSAMAAAASXSMXSASXMASMXXSAMM",
"MXMXMMMMAMAXXAMMMAMAMSSMAAMSMMSSSMSSSSMMXMASMSMSAAASAMXAXMAMAMXMXSASASAXXXXAMXMMSXMSSMMXAMSMMXMMXXASXMMXAXMMXSAMXAMAXSSSXSAXAMXXMASXAXSMSASX",
"SMMSXSAXXSAMSXMAMMMSMXAMSMSAXAAXAAMAAXXAXMAMAMXMMMMMMMXSAMASAMXSMSASXSXSAMMSSMXASAMAAAMXMAAXMASMAMSMAXAMSSMMMMMMSMMSMMAMAMAMAMSASAMSXAMAXXMM",
"AASMASXMMMAMAMSSMSAMMSSMMXMMMMSSMMMMMMXMMSAXSMSSMSSMXSAMMSAXAXXSAMXMAMAMAXAAAAMXSAMMSMMAMMMSMAAXASASXMMMAAXMAAAAXXAXAMXMXMASAMXAXMASMSMMMAXA",
"MSAMXMAMXSAMAXAAAMXSAAAMMAXXXAAMAMXSASAMAMMMXAAAAAAMAMAMXMMXSMMMAMSSSMASAMMSSMMXSXMAAASMXMAAMXMSXSASXSXMMSMSSXMMXMMMAMSSXSXSASMSMXAXMMAMSMMM",
"XXXMAXAMXSXSSMSAMMMMMMSASASXMMSSMSASMSAMSAMAMMMMMMSMSSMMSXXAMASXSMXAASAMXSXAMAMXMMSSMMXAXAXXSAXMAMAMASMSAAAMMASMMSMSAMAXASASXMAAAMASXMXMAAAX",
"AXAXXSXSXXAXAAMMAXAXAXXAXXAMAXXXAMASASAMXAMXSXMASXXAMAXSAMMMSAMXAAMSMMMSMXMSXSMMSAXAMMMMMMXAMXMXSMMMAMAAMMMMSAMAAAASAMXSAMAMAMSMXAXAXMASXSSS",
"MSSXMAMSMMXMMMMXSSMSASMSMSMAXSXMMMMMAMMMSXMMMMXASMMAMAMSAMAMMAMSXMMMMAAAAMMMAAAXMMMMMAAAXXASXMSXMAXMMSSMXMAXMXMMMSXMXXXMXSXMMXAAXSMXMSAXAAAA",
"MAXAAMASASMAMAMXMAMXAMAAAMXSXAAMXAAMSMMAMASMXSMMSASXMAXMAMXMXAMMAMXXSMSSSXAMSMMMMMSSSMSMXAXXAASXSAMSMMAXXMMSASMXMXXAXMXMASAXXSXSMMAMAAXSMMMM",
"MSSMMSXSMMASASMMSAMMMMSMSMAXAMMMSXMMXMMAXAMMAXAMSAMMXMSSXMAMXAAXAMMXXXAMAMMMAXXAMXAAAMAXAXMMMMMAMXXAAXMMMSMMASXAMMSXMMAMXXAMXAMMAXMAXAXAXAXM",
"MAAAASASXSSMMXAMSAMAAMAAAMMMMSSXMMSMAXMSXSAMXMAMMMMSSMAAAMASXSMSASXSMMMMAXXMXSSSXMMMMMAASAMXAAMXSSSSSMSAXAAMSMMMSASAMSMSMMSMMSXSAMMMSAMXXMAS",
"MSSMMMAMAMXMXSAMXSSSMSMSXMSAAAXAMAAMASXAAMXSAMXXXAAXAMXSXMASXAMSMSAMAAAMSMMSAMAXXMSXMMSXMMAMSXSAXAAAMMMSSMSMXAXXAMXAMAXMAAAAXAAXASXAAAXAMXAM",
"XMAMSMMMSMMSAMAMAXXXXAAMAASMMMSXMSSMAMMMMMAAAXAMSMSSXMMMXXMSXMXXXMAMMMMMAAXSAMAMSAXMMAMAMXAAAAMXMMMMMXMAMXXAMXMMMSSMMSSXMASXMMXSSMMMXSMXXASX",
"MMAMAAAAMSAMXSSMMSMSSMMMMMXXXMXMMXXMAXAXAMXMMMSXMAAXAAAMMMMMMSMMMSAMSMSSMSMSMMXMXXMSXAMAMSMSMXMMSASAXMMXSASAAASMMAAAAAMMXMMAAXAMXAXAXMAXAAXS",
"MMMSMMMXXAMXAAXAXAMMXXAXXSMSMSASXMXXASMSSSMXAAXASMSSMMMXAASAXAXAMMASXAXXXAAMXSXSMMASMMMAXXAAMAMXSAXASXAAMMSXSMMAMSSMMMSAASMSMMSSSMMXMMAMSXMX",
"MAMAXSSMMSSMAMXAMMMSAASMXAAAASAMASAXXXMAXAAMMMSAMAMMAAXMSMSAMMSXXAXMMXMASMSMAMAAAMAMAMSMMMXMSSSMMSMAMMMMSXSAMXSAMAAAAXMXSAAMAAMXAXSAMMMMXAMX",
"SXSAXMAMXAAMMMASXSAMXMMAXMSMMMMMXMMMMAMXSSSSSXMMMSMSMSSXMAXAMXAMSSMXXXAMXAAMAMSMXMASMMASXASMXAAMAMXSMXMXSAMAMASASXSMMMAMMMMMMSMSMMSXMAXSMSMS",
"XMMMMSMMMSSMXMXXAMASMSASXXMMSMMMAMAAXAMXAAAAXAMXAXXXAAMMMMMSMXAXAMAXSMXMXSMXAMAXMSASMSAXXMAXAXMMXSAMXXXAMAMXMXSMMMMMMSSMASXMXMAMXAMASMMSAAAX",
"XAAAXAXXAXAMMMAMAMXMASAMSXSAAAASAMMMXAMXMMMMMMMMMMMMMMSAMAAXMXMMMMSAAXAMXXXMSSMSAMASAMXXSASMSSSXAMMMMMMSSMMSMXSXSXAXMAAMASAMAMAMMAMMMXAMSMMM",
"MSSSSSMMMSXMAMASAMAMMMAMSMMXMSMXASASXMMAXXAXSMASMASAMASASMSSMXSAXSMMMSASMSSMAAAAMMAMMMSAMAXAXAXMXSAAAXAAXAASMMSAMSMSMSSMXSAMASAMSMXSAMMMXXXA",
"AAAMAXXAXAAMXSMMASXSAMAMXASXMMXSAMASXSMSSMXSAMAXXAMAMAXMMXMAAASAMXAAXSXAXAAXMMMMMMSSMAMASAMSMMMSXSMSSMMSSMMSAAMXMAXMXAAXASASASAMSAASAMSAMXXA",
"SMSMAMSSMMMSMAMSMMASXSSSSSMAAAXMXMMMMAXMMXMAMMASXMSAMMSMSXSMMMSASXSMASXMMSMMXAXSAXXAMXSAMXSXMSAAMXAXMAAAAXASMMSMSMSSMMMMMSAMASMMMMMSAMMMSMSX",
"AAMMSXXXAXAAXAMAASMSXAAAMMSXMMSMAXAAXMMXAAXAXXAMXAXASXAASXSXSXSAMAAMAMAXAXXAXXMSMXSAMXMXSMMAAMXXAMSMSMMSAMXSXXMAXMAMAXXAXMAMMMXSSMAMAMXMAMMM",
"MMMAMMSSMMSSSMSMXMAXMMMXMASMSAAMASXXMXAMMMXXSMASMMSMMMMMMASXMAMXMSXMASMMMXSSSMASAMMXMXXXXAXAMMMMSAAASXMMMSAXMMSXXMASMSSMMSSMXMXAAMXSAMXMAXAM",
"XMMAMXAAAAXAAAAXSMSMXXXXMASAMXSMMXMAMXMAXXAMXMAXAXAXSXSAMMMAMSMSMMXMAXMASAAXMAXSAMXAMSMMMSSMMSAAMSMXMAXXAMMMSAAMSXMXAXXAASAMXAMSSMXSASXSMSAS",
"SXMMSMSSMMMSMMMSXAXMAMASMAMAMMXASXXSAMXSASMMMAXSSSSXSAXMMASAMAMAAXAMMMSAMMSMSSMMXMSXXAAAAMAAAMSMMMXMSSMMMXSAMSSSMASMSMMMXXAMMXMAXMXSMMMAMSAM",
"XAMAXAMXAMXMMXXXMMMMAMXAMASAMASXMAAXAMAMAXMASMMMAAXAMSMXSASASXSSSMSXSAMXSAXMAMXXSMSMSXSMSMMMMXAXMXAMAAAXAAMMMAMAMAMAAAAXASMXMAMMASAMXAMAMMMM",
"SSMSSSMSSSSMSSMAMMAMAMXMSMSASMMAMMMMMMXSMSAMXXAMMMMAMMMXMASAMMMAXAAAMXMSMMSMMSSXXAXAAXXXMXMAMXXMASMMSSMMMSSXMXSSMSSSSSMSMXAAMMSSMSASMXSMSAMX",
"XXAAAXXXXAMSAXMAMMMSASMXAAXAMXSAMAAAAMXXAMXAMMSMXXAMSASXSXMXMAMAMSMMMSXMAXAXMAMAMMMMMXMAMAMAMSSMMSAMXMASAAMMMMXXAXAAAMAMXSSSMXAAMSAMMASASASM",
"AMMMSMMMXMMMSSMMSAASAMXSMSMMMMMASMSSXSASXMSASMAMASMMSASAMAMAMXMMXMAXAXASMMSMMXSMSAAAAAMAMSSMMAAMXSXMAMSMMXSAAASMSMMMMMAMXAAMXMSSMMMMMAMXSAMM",
"SXMAXAXMASMXAXAAXMASAMASAMXAAMSMMMAMXMASAAMAXXAMAAAAMXMASASASAXMASMMSSMMAAXAMAMXMASMSMMAMMAMMSMMASMSMSAAMXSXSMSAAMASASXSAMMSXXAAXAAAMXSXMAMX",
"MAMAXXMXAXAMMSMMSXMSAMMXXXXSXXAMAMAMXMASXMMSMSMSMSMMMXXASMMASMMSASAAAXXXMMSXMASASXMMXMSMSMAMXMAMASMXSSXSMAMAMAMMMSASAMSAXXAXAMMSMSSMSMSASAMX",
"SAMMSMSMSSXMXSAXMAMXXAXSMSMASMXSASXSXMXMASAXAXAXAXASMSSMMAMXMMAMSSMMMSSSXMAMSASXXAMXAXAAXMSMMXSMAMASXMAMMAMAMAMAXMAMAXAMMMMSMAMAAXAMAMXAMMSS",
"SASXAAXAAXAMXSXMSMMMSMAAAAMXMXMSMSAMXASMMMSSXMXMAXXAAAXAMMMSAMXSXSASMXMASMXMMASAMSMSSSMXMMMASAXMXSMMAMAMSASAMXSMMSSMMMMXAAMMMMAMXXMMSSMSMSAX",
"MMMXMSMMMSMMAMAAXXAAAMSMSMSMMSMSAMAMMMXAXAXMXSAMXSSMMMSMMSXMAMXMASMMMAMAMMMMMAMAMXAXMAMASASAMXMMAAXSSMAMSXSASAAXAAAAXAXSSXSAAMXSSMSAASAMXMMS",
"SAAXSXAXAAAAXMMMAMSSMMAAAMAAMXAMXSAMXXSAMXSAAXXXMAXXAXAXAXAAXMAMAMAAMAMMMSAMMXSSMMXMMAMAAAMSMAMXAMMXXXXMMAMAAXXMMSSMMSMMMAMXMSAXAAMMMMMMXAAM",
"SMASXSMMSSSMSXSMSMXAXSMSMSSSMMXMASASMASAMAXMASMMSMMSSSMMSSXMASAMASXMSSSMAMSASMMAAMMSSSSXMAMAMMMSAMAMMMMAMAMMMASAMAXAAAAAMMMSXMASMSMMASAMSMSS",
"SAMXXXXAAMAMMAXAXMASMXXAAMXMASXMXSAMMAMAMMSAMSAASAAAXAXAMSASASASMSAAAAAMXSMMMASMMSAAMXMXXSSMSAASAMSXMASASASAXMASMMSMMSSMSXXSAMXXXAXSASAMMAAM",
"SSXMASMMSSMMMAMMMASAMXSMSMASAMAXAMAMMSSXMXXXMSXMSMMXSAMSSSXMMSAMXSMMMSMMSMMXAXXXSMMXSAXSAMXXMMXSSMASMXSMSMSASMXXMXXXAXMASAXSXMSASAMMXSXMMMMS",
];

#[cfg(test)]
mod day4_test {
    use super::*;

    const TEST_INPUT: &[&str] = &[
        "MMMSXXMASM",
        "MSAMXMSMSA",
        "AMXSXMAAMM",
        "MSAMASMSMX",
        "XMASAMXAMM",
        "XXAMMXXAMA",
        "SMSMSASXSS",
        "SAXAMASAAA",
        "MAMMMXMMMM",
        "MXMXAXMASX",
    ];

    #[test]
    fn test_count_xmas() {
        assert_eq!(count_xmas(TEST_INPUT), 18);
    }

    #[test]
    fn test_count_mas() {
        assert_eq!(count_mas(TEST_INPUT), 9)
    }

    #[test]
    fn test_create_rotations() {
        let loc = (3, 3);
        let expected = [
            [(3, 3), (2, 3), (1, 3), (0, 3)],
            [(3, 3), (2, 4), (1, 5), (0, 6)],
            [(3, 3), (3, 4), (3, 5), (3, 6)],
            [(3, 3), (4, 4), (5, 5), (6, 6)],
            [(3, 3), (4, 3), (5, 3), (6, 3)],
            [(3, 3), (4, 2), (5, 1), (6, 0)],
            [(3, 3), (3, 2), (3, 1), (3, 0)],
            [(3, 3), (2, 2), (1, 1), (0, 0)],
        ];

        assert_eq!(create_xmas_rotations(&loc), expected);
    }

    #[test]
    fn test_is_valid() {
        let valid_loc = [(3, 3), (2, 3), (1, 3), (0, 3)];
        let invalid_loc = [(3, 3), (2, 3), (1, 3), (-1, 3)];
        assert!(is_valid(input_size(TEST_INPUT), &valid_loc));
        assert!(!is_valid(input_size(TEST_INPUT), &invalid_loc));
    }
}
