use std::collections::{HashSet, HashMap, hash_map::Entry};
use std::ops::Add;

fn main() {
    let map = Map::load(PUZZLE_INPUT).unwrap();
    let (positions, blocks) = map.distinct_positions();
    println!("positions: {positions}");
    println!("blocks: {blocks}");
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
struct Vec2 {
    x: i32,
    y: i32,
}

impl Add<Vec2> for Vec2 {
    type Output = Vec2;

    fn add(self, rhs: Vec2) -> Self::Output {
        Self {
            x: self.x + rhs.x,
            y: self.y + rhs.y,
        }
    }
}

impl Vec2 {
    fn new(x: i32, y: i32) -> Self {
        Self { x, y }
    }

    fn in_bounds(&self, bounds: Vec2) -> bool {
        0 <= self.x && self.x < bounds.x && 0 <= self.y && self.y < bounds.y
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
enum Orientation {
    North,
    East,
    South,
    West,
}

impl From<Orientation> for Vec2 {
    fn from(val: Orientation) -> Vec2 {
        match val {
            Orientation::North => Vec2::new(-1, 0),
            Orientation::East => Vec2::new(0, 1),
            Orientation::South => Vec2::new(1, 0),
            Orientation::West => Vec2::new(0, -1),
        }
    }
}

impl Orientation {
    fn next(&self) -> Orientation {
        match self {
            Orientation::North => Orientation::East,
            Orientation::East => Orientation::South,
            Orientation::South => Orientation::West,
            Orientation::West => Orientation::North,
        }
    }
}

#[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
struct Track(u8);

impl From<Orientation> for Track {
    fn from(val: Orientation) -> Track {
        Self(match val {
            Orientation::North => 0b1000,
            Orientation::East => 0b0100,
            Orientation::South => 0b0010,
            Orientation::West => 0b0001,
        })
    }
}

impl Track {
    fn step(&mut self, direction: Orientation) {
        let track: Track = direction.into();
        self.0 |= track.0;
    }

    fn goes_right(&self, direction: Orientation) -> bool {
        let new_direction: Track = direction.into();
        let mask = (self.0 << 1) % 0b1111;
        new_direction.0 & mask != 0
    }
}

#[derive(Clone, Debug, PartialEq, Eq)]
struct Map {
    size: Vec2,
    obstacles: HashSet<Vec2>,
    guard: Guard,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
struct Guard {
    position: Vec2,
    orientation: Orientation,
}

impl Guard {
    fn step(&mut self, map: &Map) {
        let mut try_step = self.position + self.orientation.into();

        while map.obstacles.contains(&try_step) {
            self.orientation = self.orientation.next();
            try_step = self.position + self.orientation.into();
        }

        self.position = try_step;
    }
}

impl Map {
    fn load(input: &str) -> Option<Self> {
        let mut obstacles = HashSet::<Vec2>::new();
        let size = Vec2::new(input.lines().count() as i32, input.lines().next().unwrap().len() as i32);
        let mut guard: Option<Guard> = None;
        
        for (x, line) in input.lines().enumerate() {
            for (y, char) in line.bytes().enumerate() {
                match char {
                    b'#' => {obstacles.insert(Vec2::new(x as i32, y as i32));},
                    b'^' => {guard = Some(Guard { position: Vec2::new(x as i32, y as i32), orientation: Orientation::North });},
                    b'>' => {guard = Some(Guard { position: Vec2::new(x as i32, y as i32), orientation: Orientation::East });},
                    b'v' => {guard = Some(Guard { position: Vec2::new(x as i32, y as i32), orientation: Orientation::South });},
                    b'<' => {guard = Some(Guard { position: Vec2::new(x as i32, y as i32), orientation: Orientation::West });},
                    _ => (),
                }
            }
        }

        guard.map(|guard|  Map { size, obstacles, guard })
    }

    fn distinct_positions(&self) -> (usize, usize) {
        let mut guard = self.guard.clone();
        let mut positions = HashSet::new();
        let mut tracks = HashMap::<Vec2, Track>::new();
        let mut blocks = HashSet::<Vec2>::new();

        while guard.position.in_bounds(self.size) {
            positions.insert(guard.position);

            // if the guards current track overlays an existing track
            // with a right turn, the next step would be a block choice.
            // Also, if there is ANY path to the right that leads to an obstacle,
            // a block also works.
            match tracks.entry(guard.position) {
                Entry::Vacant(v) => {
                    let mut track = Track::default();
                    track.step(guard.orientation);
                    v.insert(track);
                }
                Entry::Occupied(o) => {
                    let track = o.into_mut();
                    if track.goes_right(guard.orientation) {
                        let next_step = guard.position + guard.orientation.into();
                        blocks.insert(next_step);
                        println!("inserting block at {next_step:?}");
                    }
                    track.step(guard.orientation);
                }
            }
                       
            guard.step(self);
        }

        (positions.len(), blocks.len())
    }
}

const PUZZLE_INPUT: &str =
".........................................#...............................#..........#.......................#.....................
................#.........................................#.................................#..........#...#......................
......................#...#............#..................#......................#.##........#............#.......................
...........................#...............................##.................#..............#............#.......................
..........#....#...............#.........#.................................#.......#.....................#..........#..........#..
..........................................#..............#...............................#.......................#................
.................#..#..........#.#..................#................................#.......#.#........#....#....#...............
.......#............#....................................#..#.....##...............................#........##...........#........
......#..................................................#.....#..................#......................................#........
....................................................................................................#...#.......#.............#...
.....#...................................................#...........#...##........##.................................#...........
........................#..........................#...............#.......#............#..#..........##..............#...........
.....................#...................................#.........................#..............#......#..................#.....
.........#.#....#.....#...................................#....................................#..................................
.........#.#......#.........................#............................................#...#...................................#
.........................................#.#...............................#..............#..............................#........
#...........#...................#.....#..................#.........#...#...................#.............................##.....#.
#....#..........#............#................................#...#............##.....#....................#......................
#.................................##...#........#..............#.......#..........#....................................#.........#
..............#...#...............................................#................#........#...#.................#......#........
..............#.....................#.....#...........#............#...#.......##.........................##.#....................
....#............................................##...................#.......................................#........#..........
.................................................................................#...#............................................
....................................#...................#.........#......#.....#...#.............................#..............#.
.....#................................#................................#........................................................#.
.............................................#..........##........#.........#..........................#..........................
...............#..#...........#.......#........................#.........#.....................................................##.
...#....................#.........................#..#............................#...........#..#...#...............#............
........#.....................................#.......................................................#...#..#.........#.#......#.
...........................................#...............#............................................................#.....#...
.........................................#.....#............##......................#..............................#..............
..#...............#.............................#............................#.........#.......#..................................
..............................................................................................................#.............#....#
..................#.#.............#......................................#.......#...............#..........#.....................
........................#.#.......#..........#...#......#.........#......#.................#........#.......#............#....#.#.
..#.....................................................................#......................#...............#..................
..................................................................#......#............................#........#........#.........
......................................#.....................#..................#..............#...................................
................#..#.....................................................#....................................#..........#........
...................................#........................................#.#..#............................................##..
...............................#.........................#..........................#............................#.........#......
............................#........#..............#.............#.#........................................................#....
................#..................#.....#......................#.....................................................#...........
......................#........#............#..................#...............#...............#..................................
......................................................#..................................................#........................
................#.......#..................................................................#......................................
....................................#....#...............#........................................................................
.................................................................................................#...#.#..........................
.......#..#...........#.....#...............................................................................#..............#......
...#.................#.................^...................#.....#................................................................
...............#.............................................................................#.................................#..
............................................#.....#............................................................#.#........##......
................................#................................#.......#..#......#...................#......#..............#....
...................##...........................................................#.................................................
...........................#...................#..........#...................................#............#.............#...#....
.....#........................#...............#..#.#.......#...................................#.##...............#...#...........
...#.....................#.#.......................#..........#.............................................................#.....
.......#.........................................#.........#.............#....................##...........................#......
.......................................##...........#.................#.......................................#..................#
................................#.......#..........................#........#.#........#..........#...........#....##.............
.......#............#....#....................................#.....#...............#.............................................
..........#.................#............................................................................#.............#....#...#.
...#.......................#.................................................................................................#....
.......................#....#..........................................................................................#..........
......................................................................#...............................#............#....#.........
.....#..............................................................................#............#...........................#....
..#.............#..#.............#...#............................................................................................
....................................................#.......#.............................#....#............#...................#.
....................................................................#.#...#....................................#..........#.......
......#...#................#.........#.................##......................#........................#.........................
.............#.#...........#..........................................................................#...........................
..........#.....#........#........................................................................#.#.................#...........
..........#.##....................................#......#................#..........#..........#.......##.....#..................
.............................#................................................................##.............#....................
....................................#.................................................................................###.........
..................................#..........#...................................#......#.........................................
...............#...........#.............................................#......#...................................#.............
...............#...#...................................................#...................#............#...................#.....
........................................#......#.............#........#..........................#....#.....#..................#..
.......................#......................................................................#.......#...................#.....##
.................#.....................#............#............................#..........#......................#..............
....................#................................................................#................#......#.#..................
.#............#...............................................#..#......##.#................................##....#...............
.#.......#..........................................................................................................#.............
.................#............#...............................................................................#...................
.................................##......................................#.........................#................#.............
...................#.............................................................#................................................
...#.....#..#......#........#....#.................#..................#..#......................................#...........#...#.
.#.....................#...........................................................................#............................#.
.#............................#.........#...............................................#.........................................
....#......................#......................#....#........#.....#...................................#......................#
.......#.................#..............................#.....#......................#...............#..............#.......#.....
...#.................................................................................................#........#.....#......#......
......##...................................................................................#................................#.....
..........#................................#..................................#.................................................#.
...........#........#..............#...#..............#...................................................#......#.........#......
.......#...#....................................#..##.........................................................#...................
...........#............................................##..........#..#.#.....................................................#..
...................................#............................#..............#..#..................................#............
....#.......#...............#...........................................................................#.........................
...............#.....................................................................................................#............
................#..........................................#...............##...........................#....#..........#.........
...........................................#...................................................................................#..
.................#..........................................................................#.....#.............##..........#.....
...............#..................#................................#.......................#...#.....##...........................
.............#.......................#.......#.............#.#...#......#..............#.............................#.#..........
..........##....#..#..............................#...............................................................................
.................#......#.......#.....#..........#.............................#......................#.....#.....................
....#........#....................#.#.........#.#..........#......................................................................
...........................#.......#........#.........................#.#.................#........#...............#......#.......
#..#..................#...........#.....................................................................................#.........
......#...#.#...........#.....................................................#................#..#............#..................
................##.#...#..............#..............................#............................................................
...........................................................................................#.............................#........
.......#....#...................#..........................................................#............#............#.....#......
.............#....#..................................#....#........#.....................................#.#....#..............#.#
.#..................................................#...................#...............#.........................................
...#........#..................................#............#.#.......................................#...........................
................#.....#....................................#.#.#...........#......##................#.................#......#....
...#.......................#...........#...#...........#.#........................#..#.................##.....#...................
.............#.......................................#................#....#..#..#.....................#...#............#.........
..........#..................#............#...#..................#................................................................
.........#..........#.....................#..#................#.......................#.........#.......##..#.#....#.....#....#...
#..........................#.#...........#.#.........#............................................................................
..................#.....................#......#.##...................#................................................#..#.......
.....#....#......#..#............................##.........................................................#.....#.......#...##..
....#...#.#...##..................#..........................................................#.....#..............................
..............................#............#...........#..................................#....#............#.......#.............
....................................#.....................#............................#..............#...........................
............#............#..........#....##....................................#..#.....#..................#......................";

#[cfg(test)]
mod test_day6 {
    use super::*;
    
    const TEST_INPUT: &str =
"....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...";

    #[test]
    fn test_load_map() {
        let map = Map::load(TEST_INPUT).unwrap();
        assert_eq!(map.size, Vec2::new(10, 10));
        assert_eq!(map.obstacles.len(), 8);
        assert_eq!(map.guard.position, Vec2::new(6, 4)); // (0, 0) is top left
        assert_eq!(map.guard.orientation, Orientation::North);
    }

    #[test]
    fn test_count_distinct_positions() {
        let map = Map::load(TEST_INPUT).unwrap();
        let (positions, blocks) = map.distinct_positions();
        assert_eq!(positions, 41);
        assert_eq!(blocks, 6);
    }

    #[test]
    fn test_in_bounds() {
        let bound = Vec2::new(5, 5);
        assert!(Vec2::new(3, 3).in_bounds(bound));
        assert!(!Vec2::new(-1, 3).in_bounds(bound));
    }    
}
